For a given a binary tree of integers and an integer X, find and return the total number of nodes of the given binary tree which are having data greater than X.
Input Format:
The first line of input will contain the node data, all separated by a single space. Since -1 is used as an indication whether the left or right node data exist for root, it will not be a part of the node data.

The second line of input contains an integer, denoting the value of X.

Output Format:
The only line of output prints the total number of nodes where the node data is greater than X.

Sample Input 1:
1 4 2 3 -1 -1 -1
2
Sample Output 1:
2

/*
	
	Following is the structure used to represent the Binary Tree Node

	class BinaryTreeNode<T> {
		T data;
		BinaryTreeNode<T> left;
		BinaryTreeNode<T> right;

		public BinaryTreeNode(T data) {
			this.data = data;
			this.left = null;
			this.right = null;
		}
	}

 */

public class Solution {

	public static int countNodesGreaterThanX(BinaryTreeNode<Integer> root, int x) {
       if(root==null)
           return 0;
        int count=0;
        if(root.data>x){
            count++;
        }
       
        int countleft=countNodesGreaterThanX(root.left,x);
        int countright=countNodesGreaterThanX(root.right,x);
        return count+countleft+countright;
    }

}

