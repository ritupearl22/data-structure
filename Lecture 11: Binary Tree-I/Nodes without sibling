// Nodes without sibling
// Send Feedback
// Given a binary tree, print all nodes that donâ€™t have a sibling.
// Edit : Print the elements in different lines. And order of elements doesn't matter.
// Input format :
// Elements in level order form (separated by space). If any node does not have left or right child, take -1 in its place.
// Output format :
// Print nodes separated by new line.
// Sample Input :
// 5 6 10 2 3 -1 -1 -1 -1 -1 9 -1 -1
// Sample Output :
// 9    

/*
	
	Following is the structure used to represent the Binary Tree Node

	class BinaryTreeNode<T> {
		T data;
		BinaryTreeNode<T> left;
		BinaryTreeNode<T> right;

		public BinaryTreeNode(T data) {
			this.data = data;
			this.left = null;
			this.right = null;
		}
	}

*/

public class Solution {

	public static void printNodesWithoutSibling(BinaryTreeNode<Integer> root) {
		if(root==null)
            return;
        if(root.left!=null && root.right==null)
            System.out.print(root.left.data+" ");
        if(root.left==null && root.right!=null)
            System.out.print(root.right.data+" ");
           printNodesWithoutSibling(root.left);
            printNodesWithoutSibling(root.right);
	}

}
