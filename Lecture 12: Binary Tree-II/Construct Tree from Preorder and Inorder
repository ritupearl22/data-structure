// Code: Construct Tree from Preorder and Inorder
// Send Feedback
// Given Preorder and Inorder traversal of a binary tree, create the binary tree associated with the traversals.You just need to construct the tree and return the root.
// Note: Assume binary tree contains only unique elements.
// Input format :

// Line 1 : n (Total number of nodes in binary tree)

// Line 2 : Pre order traversal

// Line 3 : Inorder Traversal

// Output Format :

// Elements are printed level wise, each level in new line (separated by space).

// Sample Input :
// 12
// 1 2 3 4 15 5 6 7 8 10 9 12
// 4 15 3 2 5 1 6 10 8 7 9 12
// Sample Output :
// 1 
// 2 6 
// 3 5 7 
// 4 8 9 
// 15 10 12

/*
	
	Following is the structure used to represent the Binary Tree Node

	class BinaryTreeNode<T> {
		T data;
		BinaryTreeNode<T> left;
		BinaryTreeNode<T> right;

		public BinaryTreeNode(T data) {
			this.data = data;
			this.left = null;
			this.right = null;
		}
	}

*/

public class Solution {
     public static BinaryTreeNode<Integer> helper(int prestart,int instart,int inend,int[] preOrder, int[] inOrder){
         if(prestart>preOrder.length-1 || instart> inend){
             return null;
         }
         BinaryTreeNode<Integer> root = new BinaryTreeNode<Integer>(preOrder[prestart]);
         int index=0;
         for(int i=instart;i<=inend;i++){
             if(inOrder[i]==root.data){
                 index=i;
             }
         }
         root.left=helper(prestart+1,instart,index-1,preOrder,inOrder);
         root.right=helper(prestart + index-instart+1,index+1,inend,preOrder,inOrder);
         return root;
     
	public static BinaryTreeNode<Integer> buildTree(int[] preOrder, int[] inOrder) {
		return helper(0,0,inOrder.length-1,preOrder,inOrder);
	}

}
