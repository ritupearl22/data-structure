// Largest BST
// Send Feedback
// Given a Binary tree, find the largest BST subtree. That is, you need to find the BST with maximum height in the given binary tree.
// Return the height of largest BST.
// Input format :

// Line 1 : Elements in level order form (separated by space)

// (If any node does not have left or right child, take -1 in its place)

// Sample Input 1:
// 5 10 6 2 3 -1 -1 -1 -1 -1 9 -1 -1
// Sample Output 1:
// 2



class value{
    int min,max;
    boolean present;
    int h;
}
public class Solution {
	/*
	 * BinaryTreeNode class
	 * 
	 * class BinaryTreeNode<T> 
	 * { 
	 * 		T data; 
	 * 		BinaryTreeNode<T> left; 
	 * 		BinaryTreeNode<T> right;
	 *		public BinaryTreeNode(T data) 
	 *		{
	 *  		this.data = data; 
	 *  	} 
	 *  }
	 */
	
	public static int largestBSTSubtree(BinaryTreeNode<Integer> root) {
		return largest(root).h;
	}
    public static value largest(BinaryTreeNode<Integer> root){
        value v= new value();
        if(root==null){
            v.h=0;
            v.present=true;
            v.min=Integer.MAX_VALUE;
            v.max= Integer.MIN_VALUE;
            return v;
        }
        value vleft= largest(root.left);
        value vright= largest(root.right);
        v.h= Math.max(vleft.h,vright.h);
        v.min=Math.min(root.data,Math.min(vleft.min,vright.min));
        v.max= Math.max(root.data,Math.max(vleft.max,vright.max));
        if(vleft.present && vright.present){
            v.present=true;
            if(root.data>vleft.max && root.data<vright.min){
                v.h++;
                v.present= true;
            }
            else
                v.present=false;
            return v;
        }
        v.present=false;
        return v;
    }

}
