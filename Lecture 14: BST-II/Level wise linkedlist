Level wise linkedlist
// Send Feedback
// Given a binary tree, write code to create a separate linked list for each level. You need to return the array which contains head of each level linked list.
// Input format :

// Elements in level order form (separated by space). If any node does not have left or right child, take -1 in its place.

// Output format : Each level linked list is printed in new line (elements separated by space).

// Sample Input :
// 5 6 10 2 3 -1 -1 -1 -1 -1 9 -1 -1
// Sample Output :
// 5 
// 6 10 
// 2 3 
// 9


import java.util.*;

public class Solution {
	/*
	 * BinaryTreeNode class
	 * 
	 * class BinaryTreeNode<T> 
	 * { 
	 * 		T data; 
	 * 		BinaryTreeNode<T> left; 
	 * 		BinaryTreeNode<T> right;
	 *		public BinaryTreeNode(T data) 
	 *		{
	 *  		this.data = data; 
	 *  	} 
	 *  }
	 */
	/*
	 * LinkedListNode Class
	 * class LinkedListNode<T> 
	 * { 
	 * 		T data; 
	 * 		LinkedListNode<T> next;
	 * 		public LinkedListNode(T data) 	
	 * 		{
	 *  		this.data = data; 
	 *  	} 
	 *  }
	 */
	public static ArrayList<LinkedListNode<Integer>> constructLinkedListForEachLevel(BinaryTreeNode<Integer> root){
        if(root==null){
            ArrayList<LinkedListNode<Integer>> al= new ArrayList<LinkedListNode<Integer>>();
            return al;
        }
        ArrayList<LinkedListNode<Integer>> al= new ArrayList<LinkedListNode<Integer>>();
        Queue <BinaryTreeNode<Integer>> q= new LinkedList <>();
        q.add(root);
        q.add(null);
        LinkedListNode<Integer>head=null;
        LinkedListNode<Integer>tail=null;
            while(!q.isEmpty()){
                BinaryTreeNode<Integer> temp=q.remove();
                if(temp==null){
                    al.add(head);
                    head=null;
                    tail=null;
                    if(!q.isEmpty()){
                        q.add(null);
                    }
                    continue;
                }
                LinkedListNode<Integer>var= new LinkedListNode<Integer>(temp.data);
                if(head==null){
                    head=var;
                    tail=var;
                }
                else{
                    tail.next=var;
                    tail=var;
                }
                if(temp.left!=null){
                    q.add(temp.left);
                }
                if(temp.right!=null){
                    q.add(temp.right);
                }
            }
        return al;
	}

}
