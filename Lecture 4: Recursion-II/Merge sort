// Merge Sort Code
// Send Feedback
// Sort an array A using Merge Sort.
// Change in the input array itself. So no need to return or print anything.
// Input format :
// Line 1 : Integer n i.e. Array size
// Line 2 : Array elements (separated by space)
// Output format :
// Array elements in increasing order (separated by space)
// Constraints :
// 1 <= n <= 1000
// Sample Input:
// 6 
// 2 6 8 5 4 3
// Sample Output:
// 2 3 4 5 6 8


public class solution {

	public static void mergeSort(int[] input){
		if(input.length<=1){
            return;
        }
        int b[]= new int[input.length/2];
        int c[]= new int[input.length-b.length];
        for(int i=0 ; i<input.length/2; i++){
            b[i] = input[i];
        }
        for(int i=input.length/2;i<input.length;i++){
            c[i-input.length/2] = input[i];
        }
        mergeSort(b);
        mergeSort(c);
        merge(b,c,input);
		
	}
    public static void merge(int[] s1, int[] s2, int[]d){
        int i=0;
        int j=0;
        int k=0;
        while(i<s1.length && j<s2.length){
            if(s1[i]<=s2[j]){
                d[k]=  s1[i];
                i++;
                k++;
            }
            else{
                d[k]=s2[j];
                k++;
                j++;
            }
        }
        while(i<s1.length){
            d[k]= s1[i];
            i++;
            k++;
        }
        while(j<s2.length){
            d[k] = s2[j];
            k++;
            j++;
        }
    }
}
