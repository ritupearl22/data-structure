// Even after Odd LinkedList
// Send Feedback
// Arrange elements in a given Linked List such that, all even numbers are placed after odd numbers. Respective order of elements should remain same.
// Note: Input and Output has already managed for you. You don't need to print the elements, instead return the head of updated LL.
// Input format:
// Linked list elements (separated by space and terminated by -1)
// Output format:
// Print the elements of updated Linked list. 
// Sample Input 1 :
// 1 4 5 2 -1
// Sample Output 1 :
// 1 5 4 2 
// Sample Input 2 :
// 1 11 3 6 8 0 9 -1
// Sample Output 2 :
// 1 11 3 9 6 8 0

/*

    Following is the Node class already written for the Linked List

    class LinkedListNode<T> {
        T data;
        LinkedListNode<T> next;
    
        public LinkedListNode(T data) {
            this.data = data;
        }
    }

*/


public class Solution {

	public static LinkedListNode<Integer> evenAfterOdd(LinkedListNode<Integer> head) {
		 if(head==null){
             return null;
         }
        LinkedListNode<Integer>oddHead=null, oddTail=null;
          LinkedListNode<Integer> evenHead=null, evenTail=null;
           LinkedListNode<Integer>current=head;
        while(current!=null){
            if((current.data)%2==0){
               if(evenHead==null)
				{
					evenHead=evenTail=current;
				}
				else
				{
					evenTail.next=current;
					evenTail=current;
				}
			}
			else
			{
				if(oddHead==null)
				{
					oddHead=oddTail=current;
				}
				else
				{
					oddTail.next=current;
					oddTail=current;
				}
			}
			current=current.next;
		}
        if(oddHead==null){
            return evenHead;
        }
        if(evenHead==null){
            return oddHead;
        }
		oddTail.next=evenHead;
		evenTail.next=null;
		return oddHead; 
	}
}
