Code : Merge two sorted LL
Send Feedback
Given two linked lists sorted in increasing order. Merge them in such a way that the result list is also sorted (in increasing order).
Try solving with O(1) auxiliary space (in-place). You just need to return the head of new linked list, don't print the elements.
Input format :
Line 1 : Linked list 1 elements of length n (separated by space and terminated by -1)
Line 2 : Linked list 2 elements of length m (separated by space and terminated by -1)
Output format :
Merged list elements (separated by space)
Constraints :
1 <= n, m <= 10^4
Sample Input :
 2 5 8 12 -1
 3 6 9 -1
Sample Output :
 2 3 5 6 8 9 12 
 
 
 /*

    Following is the Node class already written for the Linked List

    class LinkedListNode<T> {
        T data;
        LinkedListNode<T> next;
    
        public LinkedListNode(T data) {
            this.data = data;
        }
    }

*/

public class Solution {
    
    public static LinkedListNode<Integer> mergeTwoSortedLinkedLists(LinkedListNode<Integer> head1, LinkedListNode<Integer> head2) {
       if(head1==null){
           return head2;
       }
        if(head2==null){
            return head1;
        }
       LinkedListNode<Integer> t1=head1;
         LinkedListNode<Integer> t2=head2;
         LinkedListNode<Integer> tail;
         LinkedListNode<Integer> h3;
        
           if(t1.data<=t2.data){
            h3=t1;
            tail=head1;
            head1=head1.next;
           // tail.next=null;            
        }else{
            h3=t2;
            tail=head2;
            head2=head2.next;
        	//tail.next=null;
        }
        while(head1!=null && head2!=null){
            if(head1.data<=head2.data){
                tail.next=head1;
                tail=tail.next;
                head1=head1.next;
                //tail.next=null;
            }else{
                tail.next=head2;
                tail=tail.next;
                head2=head2.next;
                //tail.next=null;
            }
        }
        if(head1!=null){
            tail.next=head1;
        }
        if(head2!=null){
            tail.next=head2;
        }
    return h3; 
    }

}
