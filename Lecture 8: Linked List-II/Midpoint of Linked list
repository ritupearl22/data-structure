// Code : Midpoint of Linked list
// Send Feedback
// Given a linked list, find and return the midpoint.
// If the length of linked list is even, return the first mid point.
// Input format : Linked list elements (separated by space and terminated by -1)`

// Sample Input 1 :
// 1 2 3 4 5 -1
// Sample Output 1 :
// 3
// Sample Input 2 :
// 1 2 3 4 -1
// Sample Output 2 :
// 2

/*

    Following is the Node class already written for the Linked List

    class LinkedListNode<T> {
        T data;
        LinkedListNode<T> next;
    
        public LinkedListNode(T data) {
            this.data = data;
        }
    }

*/

public class Solution {
    
    public static LinkedListNode<Integer> midPoint(LinkedListNode<Integer> head) {
        LinkedListNode<Integer> slow=head; 
        LinkedListNode<Integer>fast=head;
        if(head!=null){
        while(fast.next!=null && fast.next.next!=null){
            slow=slow.next;
            fast=fast.next.next;
        }
        }
        return slow;
    }

}
