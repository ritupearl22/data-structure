For a given a string expression containing only round brackets or parentheses, check if they are balanced or not. Brackets are said to be balanced if the bracket which opens last, closes first.
Example:
Expression: (()())
Since all the opening brackets have their corresponding closing brackets, we say it is balanced and hence the output will be, 'true'.
You need to return a boolean value indicating whether the expression is balanced or not.

Input Format:
The first and the only line of input contains a string expression without any spaces in between.
 
 Output Format:
The only line of output prints 'true' or 'false'.
Note:
You don't have to print anything explicitly. It has been taken care of. Just implement the function.

Sample Input 1 :
(()()())
Sample Output 1 :
true


Sample Input 2 :
()()(()
Sample Output 2 :
false

import java.util.*;
public class Solution {

    public static boolean isBalanced(String expression) {
        if(expression.length()% 2 != 0)
            return false;
        Stack<Character> stk = new Stack<Character>();
        for(int i=0;i<expression.length();i++){
            char x= expression.charAt(i);
            if(x == '(' || x=='{' || x=='[')
            {
                stk.push(x);
                continue;
            }
            if(stk.isEmpty())
                return false;
            char check;
            switch(x){
                     case ')': 
                check = stk.pop(); 
                if (check == '{' || check == '[') 
                    return false; 
                break; 
  
            case '}': 
                check = stk.pop(); 
                if (check == '(' || check == '[') 
                    return false; 
                break; 
  
            case ']': 
                check = stk.pop(); 
                if (check == '(' || check == '{') 
                    return false; 
                break; 
            } 

            }
        return (stk.isEmpty());
    }
}
