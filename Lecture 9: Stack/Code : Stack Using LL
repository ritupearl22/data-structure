// Code : Stack Using LL
// Send Feedback
// You need to implement a Stack class using linked list.
// The data members should be private.
// Implement the following public functions :
// 1. Constructor -
// Initialises the data member (i.e. head to null).
// 2. push :
// This function should take one argument of type T and has return type void. This function should insert an element in the stack. Time complexity should be O(1).
// 3. pop :
// This function takes no input arguments and has return type T. This should removes the last element which is entered and return that element as an answer. Time complexity should be O(1).
// 4. top :
// This function takes no input arguments and has return type T. This should return the last element which is entered and return that element as an answer. Time complexity should be O(1).
// 5. size :
// Return the size of stack i.e. count of elements which are present ins stack right now. Time complexity should be O(1).
// 6. isEmpty :
// Checks if the stack is empty or not. Return true or false.


/*
    Following is the structure of the node class for a Singly Linked List

    class Node {
        int data;
        Node next;

        public Node(int data) {
            this.data = data;
            this.next = null;
        }

    }

*/

public class Stack {
    private Node head;
    private int size;


    public Stack() {
        head=null;
        size=0;
    }



    /*----------------- Public Functions of Stack -----------------*/


    public int getSize() { 
        return size;
    }

    public boolean isEmpty() {
        return head==null;
    }

    public void push(int element) {
        Node newnode = new Node(element);
        newnode.next=head;
        head=newnode;
        size++;
    }

    public int pop() {
      if(size==0){
          return -1;
      }
        int temp=head.data;
        head=head.next;
        size--;
        return temp;
    }

    public int top() {
        if(size==0){
           return -1;
        }
        return head.data;
    }
}
