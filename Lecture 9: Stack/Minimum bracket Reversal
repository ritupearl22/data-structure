// Minimum bracket Reversal
// Send Feedback
// Given a string expression which consists only ‘}’ and ‘{‘. The expression may not be balanced. You need to find the minimum number of bracket reversals which are required to make the expression balanced.
// Return -1 if the given expression can't be balanced.
// Input Format :
// String S
// Output Format :
// Required count
// Sample Input 1 :
// {{{
// Sample Output 1 :
// -1
// Sample Input 2 :
// {{{{}}
// Sample Output 2 :
// 1



import java.util.*;
public class Solution {

    public static boolean isBalanced(String expression) {
        if(expression.length()% 2 != 0)
            return false;
        Stack<Character> stk = new Stack<Character>();
        for(int i=0;i<expression.length();i++){
            char x= expression.charAt(i);
            if(x == '(' || x=='{' || x=='[')
            {
                stk.push(x);
                continue;
            }
            if(stk.isEmpty())
                return false;
            char check;
            switch(x){
                     case ')': 
                check = stk.pop(); 
                if (check == '{' || check == '[') 
                    return false; 
                break; 
  
            case '}': 
                check = stk.pop(); 
                if (check == '(' || check == '[') 
                    return false; 
                break; 
  
            case ']': 
                check = stk.pop(); 
                if (check == '(' || check == '{') 
                    return false; 
                break; 
            } 

            }
        return (stk.isEmpty());
    }
}
